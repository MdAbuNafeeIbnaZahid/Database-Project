CREATE OR REPLACE FUNCTION ADD_NEW_Department( Department_Name IN VARCHAR2 )
RETURN NUMBER IS
	JDATE DATE ;
	YEARS NUMBER ;
	MSG VARCHAR2(100) ;
BEGIN
	INSERT INTO DEPT VALUES( NUMBER_ID_SEQ.NEXTVAL, Department_Name, NULL );
	RETURN 1 ; --return the message
EXCEPTION
	--you must return value from this section also
	WHEN OTHERS THEN
		RETURN 0 ;
END ;
/








CREATE OR REPLACE FUNCTION ADD_NEW_Teacher( Username IN VARCHAR2, Pass in VARCHAR2, FIRST_NAME IN VARCHAR2, LAST_NAME IN VARCHAR2,
Address in VARCHAR2, PHone_Number IN VARCHAR2, Email_Address IN VARCHAR2, JOIN_DATE IN DATE, Dept_Name IN VARCHAR2 )
RETURN NUMBER IS
	Dept_ID NUMBER;
	SALARY NUMBER;
BEGIN
	/*SELECT Department_ID INTO DEPT_ID
	FROM DEPT
	WHERE DEPT.DEPARTMENT_NAME = Dept_Name;
	*/
	--RETURN Dept_ID;
	Dept_ID := Get_Dept_ID_From_Dept_Name(Dept_Name );
	--RETURN Dept_ID;
	SALARY :=  ( (SYSDATE-JOIN_DATE)*10 + 50000);
	INSERT INTO TEACHER VALUES( NUMBER_ID_SEQ.NEXTVAL, USERNAME, PASS, FIRST_NAME, LAST_NAME, ADDRESS, PHONE_NUMBER, EMAIL_ADDRESS,
SALARY, JOIN_DATE, DEPT_ID);
	RETURN 1 ; --return the message
EXCEPTION
	--you must return value from this section also
	WHEN NO_DATA_FOUND THEN
		RETURN -1;
	WHEN TOO_MANY_ROWS THEN
		RETURN -2;
	WHEN DUP_VAL_ON_INDEX THEN
		RETURN -3;
	WHEN INVALID_NUMBER THEN	
		RETURN -4;
	WHEN VALUE_ERROR THEN	
		RETURN -5;
	WHEN ZERO_DIVIDE THEN	
		RETURN -6;
	WHEN OTHERS THEN
		RETURN -7;
	
END ;
/

SELECT *
FROM TEACHER;

CREATE OR REPLACE FUNCTION Get_Dept_ID_From_Dept_Name(Dept_Name IN VARCHAR2 )
RETURN NUMBER IS
	RET NUMBER;
BEGIN
	RET := 0;
	SELECT DEPARTMENT_ID INTO RET
	FROM DEPT
	WHERE DEPT.DEPARTMENT_NAME = Dept_Name;
	RETURN RET;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RETURN -1;
	WHEN TOO_MANY_ROWS THEN
		RETURN -2;
	WHEN DUP_VAL_ON_INDEX THEN
		RETURN -3;
END;
/






--It is showing compilation error in Navicat
--But running nicely in SQL Plus

CREATE OR REPLACE FUNCTION Do_Username_Password_Exist(un IN VARCHAR2, pa IN VARCHAR2, userType IN VARCHAR2)
RETURN NUMBER IS
	RET NUMBER;
BEGIN
	RET := 0;
	IF LOWER(userType) LIKE 'teacher' THEN
		SELECT COUNT(*) INTO RET
		FROM TEACHER
		WHERE USERNAME = un AND PASS = pa;
	END IF;
	IF LOWER(userType) LIKE 'student' THEN
		SELECT COUNT(*) INTO RET
		FROM STUDENT
		WHERE USERNAME = un AND PASS = pa;
	END IF;
	RETURN RET;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RETURN -1;
	WHEN TOO_MANY_ROWS THEN
		RETURN -2;
	WHEN DUP_VAL_ON_INDEX THEN
		RETURN -3;
END;
/





CREATE OR REPLACE FUNCTION ADD_NEW_Student( Username IN VARCHAR2, Pass in VARCHAR2, FIRST_NAME IN VARCHAR2, LAST_NAME IN VARCHAR2,
Address in VARCHAR2, PHone_Number IN VARCHAR2, Email_Address IN VARCHAR2, LEV IN NUMBER, TERM IN NUMBER, Dept_Name IN VARCHAR2 )
RETURN NUMBER IS
	Dept_ID NUMBER;
BEGIN
	/*SELECT Department_ID INTO DEPT_ID
	FROM DEPT
	WHERE DEPT.DEPARTMENT_NAME = Dept_Name;
	*/
	--RETURN Dept_ID;
	Dept_ID := Get_Dept_ID_From_Dept_Name(Dept_Name );
	--RETURN Dept_ID;
	INSERT INTO STUDENT 
	VALUES( NUMBER_ID_SEQ.NEXTVAL, USERNAME, PASS, FIRST_NAME, LAST_NAME, ADDRESS, PHONE_NUMBER, EMAIL_ADDRESS, 
	LEV, TERM, DEPT_ID);
	RETURN 1 ; --return the message
EXCEPTION
	--you must return value from this section also
	WHEN NO_DATA_FOUND THEN
		RETURN -1;
	WHEN TOO_MANY_ROWS THEN
		RETURN -2;
	WHEN DUP_VAL_ON_INDEX THEN
		RETURN -3;
	WHEN INVALID_NUMBER THEN	
		RETURN -4;
	WHEN VALUE_ERROR THEN	
		RETURN -5;
	WHEN ZERO_DIVIDE THEN	
		RETURN -6;
	WHEN OTHERS THEN
		RETURN -7;
	
END ;
/




CREATE OR REPLACE FUNCTION Get_Dept_Name_From_Dept_ID(Dept_ID IN NUMBER )
RETURN VARCHAR2 IS
	RET VARCHAR2(200);
BEGIN
	SELECT DEPARTMENT_NAME INTO RET
	FROM DEPT
	WHERE DEPT.DEPARTMENT_ID = Dept_ID;
	RETURN RET;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RETURN 'NO_DATA_FOUND';
	WHEN TOO_MANY_ROWS THEN
		RETURN 'TOO_MANY_ROWS';
	WHEN DUP_VAL_ON_INDEX THEN
		RETURN 'DUP_VAL_ON_INDEX';
END;
/




CREATE OR REPLACE FUNCTION Get_Head_ID_From_Dept_Name(Dept_NAME IN VARCHAR2 )
RETURN NUMBER IS
	RET NUMBER;
BEGIN
	SELECT HEAD_ID INTO RET
	FROM DEPT
	WHERE DEPT.DEPARTMENT_NAME = Dept_Name;
	RETURN RET;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RETURN -1;
	WHEN TOO_MANY_ROWS THEN
		RETURN -2;
	WHEN DUP_VAL_ON_INDEX THEN
		RETURN -3;
END;
/



CREATE OR REPLACE FUNCTION Get_DEPT_ID_From_TEACHER_ID(T_ID IN NUMBER )
RETURN NUMBER IS
	RET NUMBER;
BEGIN
	SELECT DEPARTMENT_ID INTO RET
	FROM TEACHER
	WHERE TEACHER_ID = T_ID;
	RETURN RET;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RETURN -1;
	WHEN TOO_MANY_ROWS THEN
		RETURN -2;
	WHEN DUP_VAL_ON_INDEX THEN
		RETURN -3;
END;
/



CREATE OR REPLACE FUNCTION COUNT_OF_DEPT_ID_IN_LOG(D_ID IN NUMBER )
RETURN NUMBER IS
	RET NUMBER;
BEGIN
	SELECT COUNT(*) INTO RET
	FROM DEPARTMENT_HEAD_LOG
	GROUP BY DEPARTMENT_ID
	HAVING DEPARTMENT_ID = D_ID;
	RETURN RET;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RETURN -1;
	WHEN TOO_MANY_ROWS THEN
		RETURN -2;
	WHEN DUP_VAL_ON_INDEX THEN
		RETURN -3;
END;
/




CREATE OR REPLACE FUNCTION Get_T_ID_From_TEACHER_UN(T_UN IN VARCHAR2 )
RETURN NUMBER IS
	RET NUMBER;
BEGIN
	SELECT TEACHER_ID INTO RET
	FROM TEACHER
	WHERE USERNAME = T_UN;
	RETURN RET;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RETURN -1;
	WHEN TOO_MANY_ROWS THEN
		RETURN -2;
	WHEN DUP_VAL_ON_INDEX THEN
		RETURN -3;
END;
/





CREATE OR REPLACE 
FUNCTION Get_USERNAME_From_TEACHER_ID(T_ID IN NUMBER )
RETURN VARCHAR2 IS
	RET VARCHAR2(200);
BEGIN
SELECT USERNAME INTO RET
FROM TEACHER
WHERE TEACHER_ID = T_ID;
RETURN RET;
EXCEPTION
WHEN NO_DATA_FOUND THEN
	RETURN 'NO_DATA_FOUND';
WHEN TOO_MANY_ROWS THEN
	RETURN 'TOO_MANY_ROWS';
WHEN DUP_VAL_ON_INDEX THEN
	RETURN 'DUP_VAL_ON_INDEX';
WHEN OTHERS THEN
	RETURN 'OTHERS';
END;




CREATE OR REPLACE FUNCTION Get_CRS_ID_Frm_DPT_NAM_CRS_NUM(DEPT_NAME IN VARCHAR2, CRS_NUMBER IN NUMBER )
RETURN NUMBER IS
	RET NUMBER;
BEGIN
	RET := 0;
	SELECT COURSE_ID INTO RET
	FROM COURSE
	WHERE DEPARTMENT_ID = Get_Dept_ID_From_Dept_Name(DEPT_NAME) AND COURSE_NUMBER = CRS_NUMBER;
	RETURN RET;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RETURN -1;
	WHEN TOO_MANY_ROWS THEN
		RETURN -2;
	WHEN DUP_VAL_ON_INDEX THEN
		RETURN -3;
	WHEN OTHERS THEN
		RETURN -4;
END;
/